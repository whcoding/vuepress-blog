(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{319:function(e,t,v){"use strict";v.r(t);var _=v(7),r=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"php-自动加载原理分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php-自动加载原理分析"}},[e._v("#")]),e._v(" PHP 自动加载原理分析")]),e._v(" "),t("ol",[t("li",[e._v("PHP 自动加载的由来")])]),e._v(" "),t("p",[e._v("在PHP5之前, 如果想从外部引入一个PHP类 通常会使用 "),t("code",[e._v("include")]),e._v(" 和 "),t("code",[e._v("require")]),e._v(" 这两个函数来引入其他的类. 如果是小规模的开发这样使用是没什么问题的.但是随着项目越来越来大,类与类之间的依赖越来越多,这样的使用就会变的很糟糕. 所以PHP5为了解决这个问题就引入了自动装载机制(autoload), 自动装载机制可以让PHP程序在使用类的时才去自动加载包含的类文件,而不是一开始就把所有类文件加载进来, 这种机制也称为延迟加载")]),e._v(" "),t("h3",{attrs:{id:"自动加载功能带来的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动加载功能带来的好处"}},[e._v("#")]),e._v(" 自动加载功能带来的好处:")]),e._v(" "),t("ul",[t("li",[e._v("引入类时无需在使用 "),t("code",[e._v("include")]),e._v(" 和 "),t("code",[e._v("require")])]),e._v(" "),t("li",[e._v("只有在真正运行某个类的时才会自动加载包含的文件, 实现了延迟加载. 避免了 "),t("code",[e._v("include")]),e._v(" 和 "),t("code",[e._v("require")]),e._v(" 多余文件.")]),e._v(" "),t("li",[e._v("不用考虑引入类的实际磁盘地址, 实现了逻辑和实体文件的分离.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);